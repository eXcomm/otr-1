// <copyright>
// Off The Record Messaging .NET, Copyright (c) 2013
//  based upon the original Off-the-Record Messaging library by
//    Ian Goldberg, Rob Smits, Chris Alexander,
//    Willy Lew, Lisa Du, Nikita Borisov
//    otr@cypherpunks.ca, http://www.cypherpunks.ca/otr/
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of version 2.1 of the GNU Lesser General
// Public License as published by the Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
// </copyright>
// <author>Bjorn Kuiper</author>
// <email>otr@kuiper.nu</email>

using System.Globalization;
using System.Numerics;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OffTheRecord.Tests.Helper;
using OffTheRecord.Tools;

namespace OffTheRecord.Tests
{
    [TestClass]
    public class EndianTests
    {
        #region Test methods

        [TestMethod]
        [OtrTestCategory(OtrTestCategories.Tools)]
        public void Endian_Validate_if_current_architecture_is_little_Endian()
        {
            Assert.IsTrue(Endian.IsLittleEndian, "Running on Windows (8), this is expected to be Little Endian.");
        }

        [TestMethod]
        [OtrTestCategory(OtrTestCategories.Tools)]
        public void Endian_compare_results_from_BigEndian_architecture_with_current_architecture()
        {
            // Arrange
            const string expected = "415325779662433871844955547383752003988573073626";

            /* private key generated by libgcrypt, using different endian */
            const string x = "48BFDA215C31A9F0B226B3DB11F862450A0F30DA";

            // Act
            var actual = BigInteger.Parse(x, NumberStyles.HexNumber);

            // Assert
            actual.ToString().Should().Be(expected);
            actual.ToString("X").Should().Be(x);
        }
        #endregion
    }
}